<div class="time-widget-wrap" style="cursor: pointer;">
  <a class="time-widget" style="
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.2em;
    padding: 0 4px;
    white-space: nowrap;
    user-select: none;
  ">
    <span>🕒</span>
    <span id="custom-clock" style="font-size: 1.1em; letter-spacing: 0.1em; font-weight: bold;"></span>
  </a>
</div>

<script>
  const elementCache = new Map();

  function getElement(name) {
    if (elementCache.has(name) && elementCache.get(name)) return elementCache.get(name);

    let el = null;
    if (name.startsWith('#')) {
      el = document.getElementById(name.slice(1));
    } else if (name.startsWith('.')) {
      el = document.querySelector(name);
    } else {
      console.warn(`未知选择器名：${name}`);
    }

    elementCache.set(name, el);
    return el;
  }

  let defaultClockRightPosPercentage = 0;
  let collapsed = false;
  let clockTimeout = null;
  let clockInterval = null;

  function updateDigitalClock() {
    const clock = getElement('#custom-clock');
    if (clock) {
      const now = new Date();
      const h = String(now.getHours()).padStart(2, '0');
      const m = String(now.getMinutes()).padStart(2, '0');
      const s = String(now.getSeconds()).padStart(2, '0');
      clock.textContent = `${h}:${m}:${s}`;
    }
  }

  function updateOverlayTime() {
    const overlay = getElement('#clock-time-overlay');
    if (overlay) {
      const now = new Date();
      overlay.textContent = `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;
    }
  }

  function toggleStates(collapse) {
    collapsed = collapse;

    const mainInner = getElement('.main-inner');
    const clockContainer = getElement('.clock-container');
    const overlay = getElement('#clock-time-overlay');
    const sidebar = getElement('.sidebar');

    if (mainInner) {
      mainInner.style.transition = 'transform 0.5s ease';
      mainInner.style.transform = collapse ? 'translateY(-100%)' : 'translateY(0)';
      mainInner.style.pointerEvents = collapse ? 'none' : 'auto';
    }

    if (overlay) {
      if (collapse) {
        updateOverlayTime();
        overlay.classList.add('show');

        const delay = 60000 - (Date.now() % 60000);
        clockTimeout = setTimeout(() => {
          updateOverlayTime();
          clockInterval = setInterval(updateOverlayTime, 60000);
        }, delay);
      } else {
        overlay.classList.remove('show');
        clearTimeout(clockTimeout);
        clearInterval(clockInterval);
        clockTimeout = null;
        clockInterval = null;
      }
    }

    if (clockContainer) {
      if (!defaultClockRightPosPercentage) {
        const rightPx = parseFloat(getComputedStyle(clockContainer).right);
        defaultClockRightPosPercentage = rightPx / window.innerWidth * 100;
      }

      const overlayRight = overlay?.getBoundingClientRect().right || 0;
      const deltaPercentage = (overlayRight * 1.05 - window.innerWidth) / window.innerWidth * 100;

      clockContainer.style.transition = 'right 0.5s ease';
      clockContainer.style.right = collapse
        ? `${defaultClockRightPosPercentage + deltaPercentage}%`
        : `${defaultClockRightPosPercentage}%`;
      clockContainer.style.zIndex = collapse ? '-4' : '-6';
    }
  }

  setInterval(updateDigitalClock, 1000);

  document.addEventListener('click', (e) => {
    const widgetWrap = getElement('.time-widget-wrap');
    if (!widgetWrap) return;

    const sidebarToggle = getElement('.sidebar-toggle');
    const isSidebarToggleVisible = sidebarToggle && window.getComputedStyle(sidebarToggle).display !== 'none';

    if (widgetWrap.contains(e.target)) {
      e.stopPropagation();
      toggleStates(!collapsed && !isSidebarToggleVisible);
    } else if (collapsed) {
      toggleStates(false);
    }
  });
</script>
